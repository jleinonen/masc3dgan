"""
This brief scripts illustrates how to use 3D-GAN.
A small reference dataset is stored in the data/ 
folder of the progjet. This corresponds to the 
measurements of 3D-printed snowflakes as in the 
manuscript 

Mass and geometry reconstruction of snowfall particles from multi angle snowflake camera (MASC) images

The input dataset is generated by pre-processing
the raw masc images using the method described in 
Praz et al 2017 (https://doi.org/10.5194/amt-10-1335-2017)
The matlab code used to perform this pre-processing
is available upon request to the authors.

Practically speaking, the matlab code produces .mat files
for each input image and our codes read the information 
contained inside them. Users may be able, with simple 
modifications, to perform the preprocessing with other 
tools. 

"""

# 0: Load the local libraries
import sys
sys.path.append('../masc3dgan')
from masc3dgan import gan as gan, models as models, mascproj as mp, eval as el

import masc3dgan.gan as gan
import masc3dgan.models as models
import masc3dgan.mascproj as mp
import masc3dgan.eval as el

# 1: Input path and output files 
path_in='data/3D_print/'
fn_masc='data/3D_print/masc_3D_print_triplets.nc' #  Output file with triplet info
fn_out='data/3D_print/masc_3D_print_grids.nc'     #  Output file with the 3D reconstruction

# 2: Initialize a generator and predictor
gen=models.generator()
pred=models.predictor()

# 3: Load stored weights
# NOTE !!: may need to uncompress them first!
gen.load_weights('models/masc3dgan-gen_weights.h5')
pred.load_weights('models/masc3dpredictor.h5')

# 4: Get files in the input path and process all 
fn=mp.process_all(path_in,fn_masc)  

# 5: Generate the output and store it in the two files
el.masc_grids(gen, pred, fn_masc, fn_out, batch_size=64,
    noise_dim=64, grid_dim=32, size_div=0.002)

